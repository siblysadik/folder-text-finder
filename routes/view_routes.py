# routes/view_routes.py (‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ)

from flask import Blueprint, request, jsonify, render_template, send_file, Response, redirect, url_for
from globals import FILE_STORAGE_DICT, FILE_STORAGE_LOCK
# üí° file_reader ‡¶•‡ßá‡¶ï‡ßá ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
from services.file_reader import get_file_text_content, open_folder_in_os
from pathlib import Path
import logging
import uuid
import threading
import mimetypes
import io # send_file ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø io import ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã

view_bp = Blueprint('view', __name__)
logger = logging.getLogger("view_routes")

# ----------------- UPLOAD/STORAGE ROUTE (No change needed here) -----------------

@view_bp.route("/upload_for_view", methods=["POST"])
def upload_for_view():
    """
    Receives an uploaded file and its original path, stores it in memory, 
    and returns a unique file_id.
    """
    try:
        if 'file' not in request.files:
            # 500 error ‡¶è‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡ßá 400 JSON response ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
            return jsonify({"status": "error", "message": "No file part in the request."}), 400
        
        uploaded_file = request.files['file']
        # 'original_path' ‡¶è‡¶ñ‡¶® absolute path ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶Ü‡¶∏‡¶¨‡ßá
        original_path = request.form.get('original_path')

        if not uploaded_file.filename:
            return jsonify({"status": "error", "message": "No selected file."}), 400
        
        file_id = str(uuid.uuid4())
        file_content_bytes = uploaded_file.read()
        
        # üåü ‡¶•‡ßç‡¶∞‡ßá‡¶°-‡¶∏‡ßá‡¶´ ‡¶∏‡ßá‡¶≠‡¶ø‡¶Ç
        with FILE_STORAGE_LOCK:
            FILE_STORAGE_DICT[file_id] = {
                'data': file_content_bytes,
                'filename': uploaded_file.filename,
                'original_path': original_path, # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶¨‡¶∏‡ßã‡¶≤‡¶ø‡¶â‡¶ü ‡¶™‡¶æ‡¶• ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
                'timestamp': threading.local(), 
                'size': len(file_content_bytes)
            }
        
        logger.info(f"File uploaded and stored: ID={file_id}, Name={uploaded_file.filename}, Size={len(file_content_bytes)} bytes")
        
        return jsonify({"status": "ok", "file_id": file_id}), 200

    except Exception as e:
        logger.exception("Error during file upload for viewing.")
        # 500 internal server error ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡¶ì JSON response ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
        return jsonify({"status": "error", "message": f"An internal server error occurred: {e}"}), 500

# ----------------- VIEWER ROUTES (No change needed here) -----------------

@view_bp.route("/view_code/<file_id>")
def view_code(file_id):
    """
    Viewer for code/generic text files. Preloads content in HTML.
    """
    query = request.args.get('q', '').strip()
    
    with FILE_STORAGE_LOCK:
        file_info = FILE_STORAGE_DICT.get(file_id)

    if not file_info:
        return "File not found or session expired.", 404

    try:
        # ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü‡ßá ‡¶°‡¶ø‡¶ï‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã (‡¶õ‡ßã‡¶ü ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
        file_content_bytes = file_info['data']
        preloaded_content = file_content_bytes.decode('utf-8', errors='replace')
        
        return render_template(
            "code_viewer.html",
            file_id=file_id,
            filename=file_info['filename'],
            query=query,
            preloaded_content=preloaded_content
        )
    except Exception as e:
        logger.error(f"Error reading file content for view_code/{file_id}: {e}")
        return f"Error reading file content: {e}", 500


@view_bp.route("/view_text/<file_id>")
def view_text(file_id):
    """
    Special viewer for large text files (DOCX/XLSX/CSV). Loads content via JS.
    """
    query = request.args.get('q', '').strip()
    
    with FILE_STORAGE_LOCK:
        file_info = FILE_STORAGE_DICT.get(file_id)

    if not file_info:
        return "File not found or session expired.", 404

    # ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡ßã‡¶° ‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø None ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßã‡•§ JS ‡¶™‡¶∞‡ßá /get_file/ ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶¨‡ßá‡•§
    return render_template(
        "code_viewer.html", 
        file_id=file_id,
        filename=file_info['filename'],
        query=query,
        preloaded_content=None 
    )


# ----------------- FILE RETRIEVAL ROUTE (FIXED FOR PDF VIEWING) -----------------

@view_bp.route("/get_file/<file_id>")
def get_file(file_id):
    """
    Serves the file content.
    - For DOCX/XLSX/CSV/DOC, returns the plain text content.
    - For PDF, returns the file data without attachment header to open in browser.
    - For others, returns the file data as attachment for download.
    """
    with FILE_STORAGE_LOCK:
        file_info = FILE_STORAGE_DICT.get(file_id)

    if not file_info:
        return "File not found or session expired.", 404

    filename = file_info['filename']
    file_content_bytes = file_info['data']
    file_extension = Path(filename).suffix.lower()

    # üåü PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞‡ßá ‡¶ñ‡ßã‡¶≤‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
    if file_extension == '.pdf':
        # io.BytesIO ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶¨‡¶æ‡¶á‡¶ü ‡¶°‡ßá‡¶ü‡¶æ‡¶ï‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá send_file ‡¶è ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
        return send_file(
            io.BytesIO(file_content_bytes),
            mimetype='application/pdf',
            as_attachment=False, # <--- attachment ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
            download_name=filename 
        )

    # üåü Excel/CSV/DOCX/DOC ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶≤‡ßá‡¶á‡¶® ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
    TEXT_GENERATION_EXTENSIONS = {'.docx', '.doc', '.xlsx', '.xls', '.csv'}
    
    if file_extension in TEXT_GENERATION_EXTENSIONS:
        try:
            # services/file_reader.py ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
            full_text = get_file_text_content(file_id, FILE_STORAGE_DICT)
            
            if full_text is None:
                return "Failed to extract text content.", 500
            
            # Text/Plain MIME type ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
            response = Response(full_text, mimetype='text/plain; charset=utf-8')
            
            # ‡¶´‡ßç‡¶∞‡¶®‡ßç‡¶ü‡¶è‡¶®‡ßç‡¶°‡ßá ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Content-Disposition ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
            encoded_filename = filename.encode('utf-8').decode('latin-1', 'ignore')
            response.headers['Content-Disposition'] = f'attachment; filename="{encoded_filename}"; filename*=UTF-8''{filename}'

            return response
            
        except Exception as e:
            logger.error(f"Error processing text for /get_file/{file_id}: {e}")
            return f"Error processing file content: {e}", 500

    # üåü ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶´‡¶æ‡¶á‡¶≤ (‡¶Ø‡ßá‡¶Æ‡¶® Code/TXT) ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
    
    mime_type, _ = mimetypes.guess_type(filename)
    if not mime_type:
        mime_type = 'application/octet-stream'

    
    return Response(
        file_content_bytes,
        mimetype=mime_type,
        headers={
            # ‡¶è‡¶á ‡¶´‡¶æ‡¶á‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã (‡¶Ø‡¶æ ‡¶™‡¶ø‡¶°‡¶ø‡¶è‡¶´ ‡¶¨‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü‡ßá‡¶° ‡¶®‡ßü) ‡¶¨‡¶æ‡¶á ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶¨‡ßá
            "Content-Disposition": f"attachment; filename=\"{filename}\"; filename*=UTF-8''{filename}" 
        }
    )

# ----------------- FOLDER OPEN ROUTE (No change needed here) -----------------

@view_bp.route("/open_folder/<file_id>", methods=["POST"])
def open_folder(file_id):
    """
    Opens the original folder location of the file using the saved absolute path.
    """
    with FILE_STORAGE_LOCK:
        file_info = FILE_STORAGE_DICT.get(file_id)

    if not file_info:
        # File ID ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶≤‡ßá JSON response ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
        return jsonify({"status": "error", "message": "File ID not found or session expired."}), 404

    original_path = file_info.get('original_path')
    
    if not original_path:
        return jsonify({"status": "error", "message": "Original path not recorded for this file."}), 400

    try:
        # services/file_reader.py ‡¶è‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶ì‡¶™‡ßá‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
        success = open_folder_in_os(original_path)
        
        if success:
            logger.info(f"Successfully sent command to open folder for path: {original_path}")
            return jsonify({"status": "ok", "message": "Folder open command executed successfully."}), 200
        else:
            logger.error(f"Failed to execute folder open command for path: {original_path}")
            return jsonify({"status": "error", "message": "Failed to open folder on the server. (This only works in a local environment)"}), 500

    except Exception as e:
        logger.exception("Error executing open folder command.")
        return jsonify({"status": "error", "message": f"An internal error occurred while opening the folder: {e}"}), 500