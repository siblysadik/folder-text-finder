# routes/open_routes.py

from flask import Blueprint, request, jsonify, send_file
import logging
import secrets 
import io 
import os
# üöÄ globals ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞‡ßÄ‡¶Ø‡¶º TEMP_FILE_STORAGE ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
from globals import TEMP_FILE_STORAGE
# üöÄ file_reader ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® Import ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
from services.file_reader import get_original_folder_path, open_folder_in_os 

open_bp = Blueprint("open", __name__)
logger = logging.getLogger("open_routes")

# ‚ö†Ô∏è ‡¶¶‡ßç‡¶∞‡¶∑‡ßç‡¶ü‡¶¨‡ßç‡¶Ø: ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º TEMP_FILE_STORAGE = {} ‡¶∏‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, 
# ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶Ü‡¶Æ‡¶∞‡¶æ globals.py ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞‡ßÄ‡¶Ø‡¶º ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡¶ø‡•§

# -------- Open in Browser (PDF Viewer functionality) --------
@open_bp.route("/open_browser", methods=["GET"])
def open_browser():
    file_id = request.args.get("file_id")
    # ‚ö†Ô∏è ‡¶è‡¶ñ‡¶® ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞‡ßÄ‡¶Ø‡¶º TEMP_FILE_STORAGE ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
    file_info = TEMP_FILE_STORAGE.get(file_id) 
    
    if not file_info:
        return jsonify({"status": "error", "message": "File not found or has expired."}), 404

    # We use io.BytesIO to treat the byte data as a file
    file_stream = io.BytesIO(file_info['data'])
    
    return send_file(
        file_stream,
        mimetype='application/pdf',
        as_attachment=False,
        download_name=file_info['filename']
    )
    
@open_bp.route("/store_file_temp", methods=["POST"])
def store_file_temp():
    # ‡¶è‡¶á ‡¶∞‡ßÅ‡¶ü‡¶ü‡¶ø /upload_for_view ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶ø‡¶§ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶â‡¶ö‡¶ø‡¶§, ‡¶§‡¶¨‡ßá ‡¶è‡¶ü‡¶ø ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞‡ßÄ‡¶Ø‡¶º ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßá‡•§
    uploaded_file = request.files.get("file")
    if not uploaded_file:
        return jsonify({"status": "error", "message": "No file uploaded."}), 400
    
    try:
        file_content_bytes = uploaded_file.read()
        file_id = secrets.token_hex(16)
        
        # ‚ö†Ô∏è ‡¶è‡¶ñ‡¶® ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞‡ßÄ‡¶Ø‡¶º TEMP_FILE_STORAGE ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
        TEMP_FILE_STORAGE[file_id] = { 
            'data': file_content_bytes,
            'filename': uploaded_file.filename
            # 'original_path' ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶®‡ßá‡¶á
        }
        
        uploaded_file.seek(0) 
        
        return jsonify({"status": "ok", "file_id": file_id})
    except Exception as e:
        logger.exception("Failed to store file temp.")
        return jsonify({"status": "error", "message": str(e)}), 500

# ------------------ üöÄ New Route for Open Folder ------------------
@open_bp.route("/open_folder/<file_id>", methods=["POST"])
def open_folder(file_id):
    
    # TEMP_FILE_STORAGE ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶≤ ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡¶æ‡¶• ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
    folder_path = get_original_folder_path(file_id, TEMP_FILE_STORAGE)
    
    if not folder_path:
        return jsonify({"status": "error", "message": "Original folder path not found for this file. Please open the file once first."}), 404
        
    # ‡¶ì‡¶™‡ßá‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ
    if open_folder_in_os(folder_path):
        return jsonify({"status": "ok", "message": f"Opening folder: {folder_path}"})
    else:
        return jsonify({"status": "error", "message": "Failed to execute OS command to open the folder. Check server logs."}), 500