# routes/open_routes.py (‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ)

from flask import Blueprint, request, jsonify, send_file
import logging
import secrets¬†
import io¬†
import os
# üöÄ globals ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞‡ßÄ‡¶Ø‡¶º FILE_STORAGE_DICT ‡¶è‡¶¨‡¶Ç Lock ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
from globals import FILE_STORAGE_DICT, FILE_STORAGE_LOCK
# üöÄ file_reader ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® Import ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
from services.file_reader import get_original_folder_path, open_folder_in_os¬†

open_bp = Blueprint("open", __name__)
logger = logging.getLogger("open_routes")


# -------- Open in Browser (PDF Viewer functionality) --------
@open_bp.route("/open_browser", methods=["GET"])
def open_browser():
    file_id = request.args.get("file_id")
    
    with FILE_STORAGE_LOCK:
        # ‚ö†Ô∏è ‡¶è‡¶ñ‡¶® ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞‡ßÄ‡¶Ø‡¶º FILE_STORAGE_DICT ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
        file_info = FILE_STORAGE_DICT.get(file_id)¬†
¬† ¬† 
    if not file_info:
        return jsonify({"status": "error", "message": "File not found or has expired."}), 404

    # We use io.BytesIO to treat the byte data as a file
    file_stream = io.BytesIO(file_info['data'])
    
    return send_file(
        file_stream,
        mimetype='application/pdf',
        as_attachment=False,
        download_name=file_info['filename']
    )
    
@open_bp.route("/store_file_temp", methods=["POST"])
def store_file_temp():
    # ‡¶è‡¶á ‡¶∞‡ßÅ‡¶ü‡¶ü‡¶ø /upload_for_view ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶ø‡¶§ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶â‡¶ö‡¶ø‡¶§, ‡¶§‡¶¨‡ßá ‡¶è‡¶ü‡¶ø ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞‡ßÄ‡¶Ø‡¶º ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßá‡•§
    uploaded_file = request.files.get("file")
    
    if not uploaded_file:
        return jsonify({"status": "error", "message": "No file uploaded."}), 400
    
    try:
        file_content_bytes = uploaded_file.read()
        # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá secrets ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá uuid ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ (view_routes.py ‡¶è‡¶∞ ‡¶Æ‡¶§‡ßã)
        # ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶∏‡¶æ‡¶Æ‡¶û‡ßç‡¶ú‡¶∏‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶æ‡¶§‡¶§ secrets ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶≤‡ßã‡•§
        file_id = secrets.token_hex(16)
        
        with FILE_STORAGE_LOCK:
            # ‚ö†Ô∏è ‡¶è‡¶ñ‡¶® ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞‡ßÄ‡¶Ø‡¶º FILE_STORAGE_DICT ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
            FILE_STORAGE_DICT[file_id] = {¬†
                'data': file_content_bytes,
                'filename': uploaded_file.filename
                # 'original_path' ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶®‡ßá‡¶á (‡¶Ø‡¶¶‡¶ø‡¶ì view_routes ‡¶è ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá)
            }
        
        uploaded_file.seek(0)¬†
        
        return jsonify({"status": "ok", "file_id": file_id})
    except Exception as e:
        logger.exception("Failed to store file temp.")
        return jsonify({"status": "error", "message": str(e)}), 500

# ------------------ üöÄ New Route for Open Folder ------------------
@open_bp.route("/open_folder/<file_id>", methods=["POST"])
def open_folder(file_id):
    
    with FILE_STORAGE_LOCK:
        # FILE_STORAGE_DICT ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶≤ ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡¶æ‡¶• ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
        # get_original_folder_path ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø globals.py ‡¶•‡ßá‡¶ï‡ßá dict-‡¶ü‡¶ø ‡¶Ü‡¶∞‡ßç‡¶ó‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶®‡ßá‡¶Ø‡¶º‡•§
        folder_path = get_original_folder_path(file_id, FILE_STORAGE_DICT)
    
    if not folder_path:
        return jsonify({"status": "error", "message": "Original folder path not found for this file. Please open the file once first."}), 404
        
    # ‡¶ì‡¶™‡ßá‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ
    if open_folder_in_os(folder_path):
        return jsonify({"status": "ok", "message": f"Opening folder: {folder_path}"})
    else:
        # Note: open_folder_in_os ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ Local/Desktop ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá‡•§ Render/Cloud-‡¶è ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶¨‡ßá‡•§
        return jsonify({"status": "error", "message": "Failed to execute OS command to open the folder. (This functionality is only supported in a local environment). Check server logs."}), 500