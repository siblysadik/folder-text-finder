# server.py (рж╕ржВрж╢рзЛржзрж┐ржд)

from flask import Flask, send_from_directory
from routes.search_routes import search_bp
from routes.open_routes import open_bp
from routes.view_routes import view_bp
import logging
from werkzeug import formparser
from werkzeug.wrappers import Request
import os
import shutil
import time
# ЁЯЪА globals.py ржлрж╛ржЗрж▓ржЯрж┐ ржерзЗржХрзЗ рж╕ржарж┐ржХ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ ржЗржорзНржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣рж▓рзЛ ЁЯЪА
from globals import TEMP_DIR_PATH, FILE_CLEANUP_HOURS, FILE_STORAGE_DICT, FILE_STORAGE_LOCK

# ржЕрждрж┐рж░рж┐ржХрзНржд ржорзЗржорж░рж┐ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЬржирзНржп: formparser-ржПрж░ ржлрж╛ржЗрж▓ ржмрж╛ржлрж╛рж░рзЗрж░ рж╕рзАржорж╛ ржмрзГржжрзНржзрж┐ 
# 512 MB ржкрж░рзНржпржирзНржд ржЫрзЛржЯ ржлрж╛ржЗрж▓ржЧрзБрж▓рж┐ ржорзЗржорж░рж┐рждрзЗ ржмрж╛ржлрж╛рж░ рж╣ржмрзЗ
formparser.DEFAULT_MAX_SIZE = 512 * 1024 * 1024
formparser.PART_MAX_SIZE = 512 * 1024 * 1024

# ржлрж░рзНржо ржбрзЗржЯрж╛рж░ ржорзЗржЯрж╛ржбрзЗржЯрж╛ (ржпрзЗржоржи ржлрж╛ржЗрж▓рзЗрж░ ржирж╛ржо ржУ ржкрж╛рже) ржмрж╛ржлрж╛рж░ ржЖржХрж╛рж░ ржмрзГржжрзНржзрж┐ред
Request.max_form_parts = 0 
formparser.DEFAULT_MAX_FORM_MEMORY_SIZE = 10 * 1024 * 1024 # 10 MB

# ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи: ржорзЛржЯ ржЖржкрж▓рзЛржб рж╕рж╛ржЗржЬ 4 GB рж░рж╛ржЦрж╛ рж╣рж▓рзЛ
MAX_CONTENT_LENGTH = 4 * 1024 * 1024 * 1024

app = Flask(__name__, static_folder="static", static_url_path="")
app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# ЁЯМЯ рж╕рж╛рж░рзНржнрж╛рж░ рж╢рзБрж░рзБрж░ ржЖржЧрзЗ ржЯрзЗржорзНржк ржлрзЛрж▓рзНржбрж╛рж░ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рж╛
def cleanup_temp_files():
    """ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕ржоржпрж╝рзЗрж░ ржЪрзЗржпрж╝рзЗ ржкрзБрж░ржирзЛ ржЯрзЗржорзНржк ржлрж╛ржЗрж▓ржЧрзБрж▓рж┐ ржбрж┐рж▓рж┐ржЯ ржХрж░рзЗред"""
    # ЁЯМЯ ржЕржи-ржбрж┐рж╕рзНржХ ржЯрзЗржорзНржк ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рж╛ ЁЯМЯ
    now = time.time()
    cutoff = now - (FILE_CLEANUP_HOURS * 3600) # 1 ржШржгрзНржЯрж╛ ржЖржЧрзЗ
    
    # ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржпрзЗ ржлрзЛрж▓рзНржбрж╛рж░ржЯрж┐ ржЖржЫрзЗ
    if not TEMP_DIR_PATH.exists():
        TEMP_DIR_PATH.mkdir(parents=True, exist_ok=True)
        return

    # ржлрзЛрж▓рзНржбрж╛рж░рзЗрж░ ржнрзЗрждрж░рзЗ ржлрж╛ржЗрж▓ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛
    for item in TEMP_DIR_PATH.iterdir():
        try:
            # os.stat() ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╢рзЗрж╖ ржкрж░рж┐ржмрж░рзНрждржирзЗрж░ рж╕ржоржпрж╝ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝
            if os.stat(item).st_mtime < cutoff:
                if item.is_dir():
                    shutil.rmtree(item)
                else:
                    os.remove(item)
                logging.info(f"Cleaned up old on-disk file/dir: {item}")
        except Exception as e:
            logging.error(f"Error cleaning up on-disk item {item}: {e}")

    # ЁЯМЯ ржЗржи-ржорзЗржорж░рж┐ рж╕рзНржЯрзЛрж░рзЗржЬ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рж╛ ЁЯМЯ
    # ржпрзЗрж╣рзЗрждрзБ рж╕рж╛рж░рзНржнрж╛рж░ рж░рж┐рж╕рзНржЯрж╛рж░рзНржЯ рж╣ржЪрзНржЫрзЗ, рждрж╛ржЗ ржЗржи-ржорзЗржорж░рж┐ ржбрж┐ржХрж╢ржирж╛рж░рж┐ ржПржоржирж┐рждрзЗржЗ ржЦрж╛рж▓рж┐ рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝ред
    # рждржмрзЗ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рж╛рж░ ржЬржирзНржп ржПржЯрж┐ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ (ржпржжрж┐ржУ ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржиржпрж╝):
    # with FILE_STORAGE_LOCK:
    #     FILE_STORAGE_DICT.clear()
    # logging.info("In-memory file storage dictionary cleared.")


# Register blueprints
app.register_blueprint(search_bp)
app.register_blueprint(open_bp)
app.register_blueprint(view_bp)

@app.route("/")
def index():
    return send_from_directory(app.static_folder, "index.html")

# ЁЯМЯ ржбрзЗржкрзНрж▓ржпрж╝ржорзЗржирзНржЯрзЗрж░ рж╕ржоржпрж╝ cleanup ржлрж╛ржВрж╢ржиржЯрж┐ ржЪрж╛рж▓рж╛ржирзЛ ржЙржЪрж┐ржд
with app.app_context():
    cleanup_temp_files()

if __name__ == "__main__":
    app.run(port=5055, debug=False)