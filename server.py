# server.py

from flask import Flask, send_from_directory
from routes.search_routes import search_bp
from routes.open_routes import open_bp
from routes.view_routes import view_bp
import logging
from werkzeug import formparser
from werkzeug.wrappers import Request
import os
import shutil
import time
# ЁЯЪА globals.py ржлрж╛ржЗрж▓ржЯрж┐ ржЗржорзНржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣рж▓рзЛ
from globals import TEMP_FILE_STORAGE, FILE_CLEANUP_HOURS 

# ржЕрждрж┐рж░рж┐ржХрзНржд ржорзЗржорж░рж┐ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЬржирзНржп: formparser-ржПрж░ ржлрж╛ржЗрж▓ ржмрж╛ржлрж╛рж░рзЗрж░ рж╕рзАржорж╛ ржмрзГржжрзНржзрж┐ 
# 10 MB ржкрж░рзНржпржирзНржд ржЫрзЛржЯ ржлрж╛ржЗрж▓ржЧрзБрж▓рж┐ ржорзЗржорж░рж┐рждрзЗ ржмрж╛ржлрж╛рж░ рж╣ржмрзЗ
formparser.DEFAULT_MAX_SIZE = 512 * 1024 * 1024
formparser.PART_MAX_SIZE = 512 * 1024 * 1024

# ржлрж░рзНржо ржбрзЗржЯрж╛рж░ ржорзЗржЯрж╛ржбрзЗржЯрж╛ (ржпрзЗржоржи ржлрж╛ржЗрж▓рзЗрж░ ржирж╛ржо ржУ ржкрж╛рже) ржмрж╛ржлрж╛рж░ ржЖржХрж╛рж░ ржмрзГржжрзНржзрж┐ред
Request.max_form_parts = 0 
formparser.DEFAULT_MAX_FORM_MEMORY_SIZE = 10 * 1024 * 1024 # 10 MB

# ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи: ржорзЛржЯ ржЖржкрж▓рзЛржб рж╕рж╛ржЗржЬ 64 GB рж░рж╛ржЦрж╛ рж╣рж▓рзЛ
MAX_CONTENT_LENGTH = 64 * 1024 * 1024 * 1024

app = Flask(__name__, static_folder="static", static_url_path="")
app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# ЁЯМЯ рж╕рж╛рж░рзНржнрж╛рж░ рж╢рзБрж░рзБрж░ ржЖржЧрзЗ ржЯрзЗржорзНржк ржлрзЛрж▓рзНржбрж╛рж░ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рж╛
def cleanup_temp_files():
    """ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕ржоржпрж╝рзЗрж░ ржЪрзЗржпрж╝рзЗ ржкрзБрж░ржирзЛ ржЯрзЗржорзНржк ржлрж╛ржЗрж▓ржЧрзБрж▓рж┐ ржбрж┐рж▓рж┐ржЯ ржХрж░рзЗред"""
    now = time.time()
    cutoff = now - (FILE_CLEANUP_HOURS * 3600) # 1 ржШржгрзНржЯрж╛ ржЖржЧрзЗ
    
    # ЁЯМЯ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржпрзЗ ржлрзЛрж▓рзНржбрж╛рж░ржЯрж┐ ржЖржЫрзЗ
    if not TEMP_FILE_STORAGE.exists():
        TEMP_FILE_STORAGE.mkdir(parents=True, exist_ok=True)
        return

    # ЁЯМЯ ржлрзЛрж▓рзНржбрж╛рж░рзЗрж░ ржнрзЗрждрж░рзЗ ржлрж╛ржЗрж▓ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛
    for item in TEMP_FILE_STORAGE.iterdir():
        try:
            # os.stat() ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╢рзЗрж╖ ржкрж░рж┐ржмрж░рзНрждржирзЗрж░ рж╕ржоржпрж╝ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝
            if os.stat(item).st_mtime < cutoff:
                if item.is_dir():
                    shutil.rmtree(item)
                else:
                    os.remove(item)
                logging.info(f"Cleaned up old file/dir: {item}")
        except Exception as e:
            logging.error(f"Error cleaning up {item}: {e}")

# Register blueprints
app.register_blueprint(search_bp)
app.register_blueprint(open_bp)
app.register_blueprint(view_bp)

@app.route("/")
def index():
    return send_from_directory(app.static_folder, "index.html")

# ЁЯМЯ ржбрзЗржкрзНрж▓ржпрж╝ржорзЗржирзНржЯрзЗрж░ рж╕ржоржпрж╝ cleanup ржлрж╛ржВрж╢ржиржЯрж┐ ржЪрж╛рж▓рж╛ржирзЛ ржЙржЪрж┐ржд
cleanup_temp_files()

if __name__ == "__main__":
    app.run(port=5055, debug=False)